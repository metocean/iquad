// Generated by CoffeeScript 1.9.2
var whakaruru;

whakaruru = require('whakaruru-watch/verbose');

whakaruru('**/*.js', function() {
  var app, async, compression, dataset, datasets, express, filesize, fn, fs, heap, mutunga, name, quadify, tasks, tiletolnglat;
  express = require('express');
  mutunga = require('http-mutunga');
  fs = require('fs');
  tiletolnglat = require('tiletolnglat');
  quadify = require('./quadify');
  async = require('odo-async');
  filesize = require('filesize');
  app = express();
  app.disable('x-powered-by');
  compression = require('compression');
  app.use(compression());
  datasets = fs.readFileSync('./datasets.json');
  datasets = JSON.parse(datasets);
  console.log("Loading " + (Object.keys(datasets).length) + " datasets from HD");
  heap = process.memoryUsage().heapUsed;
  tasks = [];
  fn = function(name, dataset) {
    return tasks.push(function(cb) {
      return fs.readFile(dataset.file, function(err, points) {
        points = JSON.parse(points);
        dataset.points = points;
        return cb();
      });
    });
  };
  for (name in datasets) {
    dataset = datasets[name];
    fn(name, dataset);
  }
  return async.parallel(tasks, function() {
    var server;
    heap = process.memoryUsage().heapUsed - heap;
    console.log((filesize(heap)) + " for " + (Object.keys(datasets).length) + " raw datasets");
    for (name in datasets) {
      dataset = datasets[name];
      console.log("Quadding " + name);
      dataset.tree = quadify(dataset.points, dataset.zoom);
    }
    heap = process.memoryUsage().heapUsed - heap;
    console.log((filesize(heap)) + " for " + (Object.keys(datasets).length) + " dataset quadtrees");
    app.get('/', function(req, res) {
      return res.send({
        datasets: Object.keys(datasets).map(function(name) {
          dataset = datasets[name];
          return {
            name: name,
            points: dataset.points.lon.length,
            zoom: dataset.zoom,
            url: "/" + name + "/{z}/{x}/{y}.json"
          };
        })
      });
    });
    app.get('/:dataset/:z/:x/:y.json', function(req, res) {
      var node, ref, x, y, z;
      name = req.params.dataset;
      if (datasets[name] == null) {
        res.status(404);
        res.send({
          message: name + " is not a valid dateset"
        });
        return;
      }
      dataset = datasets[name];
      x = parseInt(req.params.x);
      y = parseInt(req.params.y);
      z = parseInt(req.params.z);
      node = dataset.tree.get(x, y, z);
      return res.send({
        type: 'FeatureCollection',
        features: [
          {
            id: 'count',
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: tiletolnglat(x + 0.5, y + 0.5, z)
            },
            properties: {
              count: (ref = node != null ? node.count : void 0) != null ? ref : 0
            }
          }, {
            id: 'points',
            type: 'Feature',
            geometry: {
              type: 'MultiPoint',
              coordinates: (node != null ? node.indexes : void 0) != null ? node.indexes.map(function(i) {
                return [parseFloat(dataset.points.lon[i].toFixed(2)), parseFloat(dataset.points.lat[i].toFixed(2))];
              }) : []
            }
          }
        ]
      });
    });
    return server = mutunga(app).listen(8080, function() {
      return process.on('SIGTERM', function() {
        console.log(process.pid + " Ōhākī");
        return server.close(function() {
          return process.exit(0);
        });
      });
    });
  });
});
